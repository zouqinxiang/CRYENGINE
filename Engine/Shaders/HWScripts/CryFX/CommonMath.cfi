// Copyright 2001-2019 Crytek GmbH / Crytek Group. All rights reserved.

#define MAX_FRACTIONAL_8_BIT        (255.0f / 256.0f)
#define MIDPOINT_8_BIT              (127.0f / 255.0f)
#define TWO_BITS_EXTRACTION_FACTOR  (3.0f + MAX_FRACTIONAL_8_BIT)

#define short  min16int
#define short2 min16int2
#define short3 min16int3
#define short4 min16int4

////////////////////////////////////////////////////////////////////////////////////////////////////
// Basic math tools

float4 sqr(float4 x)
{
	return x * x;
}

float3 sqr(float3 x)
{
	return x * x;
}

float hmin(float4 c)
{
	float2 d = min(c.xy, c.zw);
	return min(d.x, d.y);
}

float hmax(float4 c)
{
	float2 d = max(c.xy, c.zw);
	return max(d.x, d.y);
}

float hmin(float4 a, float4 b)
{
	return hmin(min(a, b));
}

float hmax(float4 a, float4 b)
{
	return hmax(min(a, b));
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Geometric math

float IntersectAABB(float3 rayDir, float3 rayOrg, float3 boxExt)
{
	if (length(rayDir) < 1e-6) return 1;

	// Intersection using slabs
	float3 rcpDir = rcp(rayDir);
	float3 tNeg = ( boxExt - rayOrg) * rcpDir;
	float3 tPos = (-boxExt - rayOrg) * rcpDir;

	return max(max(min(tNeg.x, tPos.x), min(tNeg.y, tPos.y)), min(tNeg.z, tPos.z));
}

uint selectCubeFace(in float3 rayVec)
{
	float3 dir = abs(rayVec);

	bool3 pmag = bool3(dir.x > dir.y, dir.y > dir.z, dir.x > dir.z);
	bool3 nmag = bool3(dir.x <= dir.y, dir.y <= dir.z, dir.x <= dir.z); 
	bool3 flp  = bool3(rayVec.x == dir.x, rayVec.y == dir.y, rayVec.z == dir.z); 

	uint cubeFace = 
		(pmag.x) * (pmag.z) * (0 + flp.x) +
		(nmag.x) * (pmag.y) * (2 + flp.y) +
		(nmag.z) * (nmag.y) * (4 + flp.z); 
		
	return cubeFace;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Encoding related math (simple)

float4 RGB10A2_to_RGB10A2f( float4 InColor )
{
	// Shift left 3 bits. This allows us to have the exponent and mantissa on opposite
	// sides of the decimal point for extraction.
	float4 OutColor = InColor * 8.0f;

	// Extract the exponent and mantissa that are now on opposite sides of the decimal point
	float3 e = floor( OutColor.rgb );
	float3 m = frac( OutColor.rgb );
	
	// Perform the 7e3 conversion.  Note that this varies on the value of e for each channel:
	// if e != 0.0f then the correct conversion is (1+m)/8*pow(2,e).
	// else it is (1+m)/8*pow(2,e).  
	OutColor.rgb  = (e == 0.0f) ? 2*m/8 : (1+m)/8 * exp2(e);

	return OutColor;
}

// Encode a float value into 3 bytes (input value should be in the range of [0, 1])
float3 PackFloatToVec3(const float value)
{
	static const float3 bitSh = float3(256.0 * 256.0, 256.0, 1.0);
	static const float3 bitMsk = float3(0.0, 1.0/256.0, 1.0/256.0);
	float3 res = frac(value * bitSh);
	res -= res.xxy * bitMsk;
	return res;
}

float UnpackFloatFromVec3(const float3 value)
{
	static const float3 bitSh = float3(1.0/(256.0*256.0), 1.0/256.0, 1.0);
	return dot(value, bitSh);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Color-Space related math

half3 GetLuminanceWeights()
{
	return half3( 0.2126h, 0.7152h, 0.0722h );
}

half GetLuminance( half3 color )
{
	return dot( color, GetLuminanceWeights() );
}

half3 EncodeColorYCC( half3 col )
{
	half3 encodedCol;

	// Y'Cb'Cr'
	col = sqrt( col );
	encodedCol.x = dot( half3(0.299, 0.587, 0.114), col.rgb );
	encodedCol.y = dot( half3(-0.1687, -0.3312, 0.5), col.rgb );
	encodedCol.z = dot( half3(0.5, -0.4186, -0.0813), col.rgb );
	
	return half3(encodedCol.x, encodedCol.y * MIDPOINT_8_BIT + MIDPOINT_8_BIT, encodedCol.z * MIDPOINT_8_BIT + MIDPOINT_8_BIT);
}

half3 DecodeColorYCC( half3 encodedCol, const bool useChrominance = true )
{
	encodedCol = half3(encodedCol.x, encodedCol.y / MIDPOINT_8_BIT - 1, encodedCol.z / MIDPOINT_8_BIT - 1);
	if (!useChrominance) encodedCol.yz = 0;
	
	// Y'Cb'Cr'
	half3 col;
	col.r = encodedCol.x + 1.402 * encodedCol.z;
	col.g = dot( half3( 1, -0.3441, -0.7141 ), encodedCol.xyz );
	col.b = encodedCol.x + 1.772 * encodedCol.y;

	return col * col;
}

// Gamma-Curve / Transfer-function only (no color-space change and no limited ranges)
half3 LinearToSRGB(half3 col)
{
	col = saturate(col);
	return (col < 0.0031308) ? 12.92h * col : 1.055h * pow(col, 1.0h / 2.4h) - half3(0.055h, 0.055h, 0.055h);
}

half3 SRGBToLinear(half3 col)
{
	col = saturate(col);
	return (col <= 0.040450h) ? col / 12.92h : pow((col + float3(0.055h, 0.055h, 0.055h)) / 1.055h, 2.4h);
}

half3 SRGBToLinearApproximation(half3 col)
{
	col = saturate(col);
	// http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
	return
		col * (col * (col * 0.305306011h + 0.682171111h) + 0.012522878h);
}

half3 SRGBToLinearApproximation(half3 col, half3 weights)
{
	col = saturate(col);
	// http://chilliant.blogspot.com/2012/08/srgb-approximations-for-hlsl.html
	return
		col.r * (col.r * (col.r * 0.305306011h + 0.682171111h) + 0.012522878h) * weights.r +
		col.g * (col.g * (col.g * 0.305306011h + 0.682171111h) + 0.012522878h) * weights.g +
		col.b * (col.b * (col.b * 0.305306011h + 0.682171111h) + 0.012522878h) * weights.b;
}

half3 LinearToREC709(half3 col)
{
	col = saturate(col);
	return (col < 0.0180000h) ? 4.50h * col : 1.099h * pow(col, 1.0h / 2.4h) - half3(0.099h, 0.099h, 0.099h);
}

half3 REC709ToLinear(half3 col)
{
	col = saturate(col);
	return (col < 0.081000h) ? col / 4.50h : pow((col + half3(0.099h, 0.099h, 0.099h)) / 1.099h, 2.4h);
}

// Rec. 2020 defines a nonlinear transfer function for gamma correction that is the same nonlinear transfer function that is used by Rec. 709,
// except that its parameters are given with higher precision
float3 LinearToREC2020(float3 col)
{
	col = saturate(col);
	return (col < 0.018053968510807f) ? 4.50f * col : 1.09929682680944f * pow(col, 1.0h / 2.4f) - float3(0.09929682680944f, 0.09929682680944f, 0.09929682680944f);
}

float3 REC2020ToLinear(float3 col)
{
	col = saturate(col);
	return (col < 0.0812428582986315f) ? col / 4.50f : pow((col + float3(0.09929682680944f, 0.09929682680944f, 0.09929682680944f)) / 1.09929682680944f, 2.4f);
}

// The color primaries of sRGB and REC709 are the same, REC2020 has distinct color primaries
float3 Convert_REC709toREC2020(half3 col)
{
	return
		0.6274f * col.x, 0.3293f * col.y, 0.0433f * col.z,
		0.0691f * col.x, 0.9195f * col.y, 0.0114f * col.z,
		0.0164f * col.x, 0.0880f * col.y, 0.8956f * col.z);
}

half3 LimitREC709_8Bit(half3 col)
{
	// Technically 0 and 255 are reserved values (timing control values) and the rest is out-of-gammut
	return (16.0 / 255.0) + col.xyz * ((235.0 - 16.0) / 255.0);
}

half3 LimitREC2020_10Bit(half3 col)
{
	// Technically 0-3 and 1020-1023 are reserved values (timing control values) and the rest is out-of-gammut
	return (64.0 / 1024.0) + col.xyz * ((940.0 - 64.0) / 1024.0);
}

half3 LimitREC2020_12Bit(half3 col)
{
	// Technically 0-15 and 4080-4095 are reserved values (timing control values) and the rest is out-of-gammut
	return (256.0 / 4096.0) + col.xyz * ((4080.0 - 256.0) / 4096.0);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// Backwards-compatibility preserving function-husks

// Common functions
half4 EXPAND( half4 a )
{
  return a * 2 - 1;
}
half3 EXPAND( half3 a )
{
  return a * 2 - 1;
}
half EXPAND( half a )
{
  return a * 2 - 1;
}
half2 EXPAND( half2 a )
{
  return a * 2 - 1;
}
