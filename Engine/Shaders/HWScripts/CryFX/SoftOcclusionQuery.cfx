// Copyright 2001-2018 Crytek GmbH / Crytek Group. All rights reserved.

#include "Common.cfi"
#include "ShadeLib.cfi"

float Script : STANDARDSGLOBAL
<
string Script =
	"NoPreview;"
	"LocalConstants;"
	"ShaderDrawType = Custom;"
	"ShaderType = FX;"
>;

struct VS_IN
{
	float3 pos : POSITION;
	float2 uv : TEXCOORD0;
};

struct VS_OUT
{
	float4 hpos : POSITION;
	float3 uvz : TEXCOORD0;
};

VS_OUT quadVS( VS_IN IN )
{
	VS_OUT OUT;
	OUT.hpos = float4(IN.pos.xy,0,1);
	OUT.uvz = float3(IN.uv, (IN.pos.z));
	return OUT;
}

Texture2D    depthTex : register(t0);
SamplerState ssDepth  : register(s0);

float renderOccPlanePS( VS_OUT IN ) : SV_Target
{
	float depth = GetTexture2D(depthTex, ssDepth, IN.uvz.xy);

	return sign(depth-IN.uvz.z);
}

float4 occlusionParams; // xy: normalized size, zw: screen UV clamp

Texture2D    occTex   : register(t0);
SamplerState ssGather : register(s0);

float2 gatherResultPS( VS_OUT IN ) : SV_Target
{
	half2 result = half2(0,0);
	#define occResult result.r
	#define dirResult result.g

	half2 dirResultVec = 0;
	half3 delta = half3( -0.25*occlusionParams.x, 0.25*occlusionParams.y, 0 );
	half3 direction = half3( -0.5, 0.5, 0 );

	half texel = GetTexture2D( occTex, ssGather, ClampScreenTC(IN.uvz.xy + delta.zz, occlusionParams.zw) ).r;
	occResult = texel;

	texel = GetTexture2D( occTex, ssGather, ClampScreenTC(IN.uvz.xy + delta.xz, occlusionParams.zw) ).r; // Left
	occResult += texel;
	dirResultVec += texel * normalize(delta.xz*2-1);

	texel = GetTexture2D( occTex, ssGather, ClampScreenTC(IN.uvz.xy + delta.zx, occlusionParams.zw) ).r; // Up
	occResult += texel;
	dirResultVec += texel * normalize(direction.zx);

	texel = GetTexture2D( occTex, ssGather, ClampScreenTC(IN.uvz.xy + delta.zy, occlusionParams.zw) ).r; // Bottom
	occResult += texel;
	dirResultVec += texel * normalize(direction.zy);

	texel = GetTexture2D( occTex, ssGather, ClampScreenTC(IN.uvz.xy + delta.yz, occlusionParams.zw) ).r; // Right
	occResult += texel;
	dirResultVec += texel * normalize(direction.yz);

	texel = GetTexture2D( occTex, ssGather, ClampScreenTC(IN.uvz.xy + delta.xx, occlusionParams.zw) ).r; // Left,Up
	occResult += texel;
	dirResultVec += texel * normalize(direction.xx);

	texel = GetTexture2D( occTex, ssGather, ClampScreenTC(IN.uvz.xy + delta.yx, occlusionParams.zw) ).r; // Right,Up
	occResult += texel;
	dirResultVec += texel * normalize(direction.yx);

	texel = GetTexture2D( occTex, ssGather, ClampScreenTC(IN.uvz.xy + delta.yy, occlusionParams.zw) ).r; // Right,Bottom
	occResult += texel;
	dirResultVec += texel * normalize(direction.yy);

	texel = GetTexture2D( occTex, ssGather, ClampScreenTC(IN.uvz.xy + delta.xy, occlusionParams.zw) ).r; // Left,Bottom
	occResult += texel;
	dirResultVec += texel * normalize(direction.xy);

	occResult /= 9;
	dirResultVec = normalize(dirResultVec);

	// Instead of using a range from (-1/2)PI to (1/2)PI here is using a range from (1/2)PI to (3/2)PI.
	const half kPI = 3.1415927;
	dirResult = (atan2( -dirResultVec.y, -dirResultVec.x )+kPI)/(kPI*2);

	// TODO: Code as 0-9.xxxx fixed point number (more than 255 angles (of 360))
	return result;
}

technique RenderPlane
{
	pass p0
	{
		VertexShader = quadVS();
		PixelShader  = renderOccPlanePS();
	}
}

technique Gather
{
	pass p0
	{
		VertexShader = quadVS();
		PixelShader  = gatherResultPS();
	}
}
