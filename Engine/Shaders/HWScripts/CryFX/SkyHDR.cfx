// Copyright 2001-2018 Crytek GmbH / Crytek Group. All rights reserved.

#include "Common.cfi"
#include "ModificatorVT.cfi"
#include "shadeLib.cfi"
#include "SkyCommon.cfi"

// TODO: remove after old graphics pipeline is removed.

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "Public;"
           "ShaderDrawType = Sky;"
           "ShaderType = General;"
>;

DIFFUSEMAP

float SkyboxAngle
<
  register = REG_PM_PARAM_0.x;
  string UIWidget = "slider";
  string UIName = "Angle";
  string UIDescription = "Set angle of skybox rotation";
  float UIMin = 0.0;
  float UIMax = 360.0;
  float UIStep = 1.0;
> = 0.0;

///////////////// io signatures //////////////////
 
struct a2v 
{
	float4 Position : POSITION; //in object space
	float2 baseTC   : TEXCOORD0;
	IN_C0
};

struct v2f_hdr
{
	float4 Position   : SV_POSITION;  //in projection space
    float2 baseTC     : TEXCOORD0;
};

struct v2fZ
{
	float4 Position  : POSITION;  //in projection space
};

///////////////// general pass //////////////////

v2f_hdr SkyHDRVS(a2v IN)
{
	v2f_hdr OUT = (v2f_hdr)0; 

	// Position in screen space.
	float4 vPos = IN.Position;
	OUT.Position = _pos_Common(vPos);
	OUT.Position.z = OUT.Position.w;
    OUT.baseTC = IN.baseTC;

	return OUT;
}

pixout SkyHDRPS(v2f_hdr IN)
{
	pixout OUT = (pixout)0;
    OUT.Color = float4(GetDiffuseTex(diffuseTex, IN.baseTC.xy).rgb, 1);
	return OUT;
}

///////////////// zpass //////////////////

v2fZ SkyZVS(a2v IN)
{
	v2fZ OUT = (v2fZ)0; 

	// Position in screen space.
	float4 vPos = IN.Position;
	OUT.Position = mul(CV_ViewProjMatr, vPos);
	OUT.Position.z = OUT.Position.w;

	return OUT;
}

pixout_gbuffer SkyZPS(v2fZ IN) 
{
	// Legacy Dummy
	pixout_gbuffer OUT = (pixout_gbuffer)0;
	return OUT;
}

///////////////// techniques //////////////////

technique General
<
  string Script =
         "TechniqueZ=ZPass;"
>
{
  pass p0
  {
    VertexShader = SkyHDRVS();
    
    ZEnable = true;
    ZWriteEnable = false;
    CullMode = None;
    GeometryShader = $AutoGS_MultiRes();
    PixelShader = SkyHDRPS();
  }
}

technique ZPass
{
  pass p0
  {
    VertexShader = SkyZVS() ZVS;
    
    ZEnable = true;
    ZWriteEnable = false;
    CullMode = None;
    
    GeometryShader = $AutoGS_MultiRes();
    PixelShader = SkyZPS() ZPS;
  }
}

///////////////// eof //////////////////
