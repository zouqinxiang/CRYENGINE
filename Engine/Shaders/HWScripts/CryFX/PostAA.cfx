// Copyright 2001-2018 Crytek GmbH / Crytek Group. All rights reserved.

#include "Common.cfi"
#include "PostEffectsLib.cfi"
#include "ShadeLib.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "NoPreview;"
           "LocalConstants;"
           "ShaderDrawType = Custom;"
           "ShaderType = PostProcess;"
>; 

/// PostAA techniques /////////////////////////////////////////////////////////////////////////

/// Specific data ////////////////////////

float4x4 mViewProjPrev;
float4x4 mReprojection;
half4 vParams;

// parameters for batched techniques into same pass
half4 vLensOpticsParams;
half4 vDebugParams;

////////////////// samplers /////////////////////

struct vtxOutAA
{
  OUT_HPOS_IN_WPOS

  float4 baseTC      : TEXCOORD0;
  float4 CamVec      : TEXCOORD1;
};

vtxOutAA PostAA_VS(vtxInWPOS IN)
{
  vtxOutAA OUT = (vtxOutAA)0; 

  float4 vPos = IN.Position;
  vPos.y = 1 -vPos.y;
	OUT.HPosition = float4(vPos.xy*2-1, vPos.z, 1.0);

  OUT.baseTC.xy = IN.baseTC.xy;
	OUT.baseTC.zw = 1.0 / g_VS_HPosScale.xy;
  OUT.CamVec.xyz = IN.CamVec;

  return OUT;
}

///////////////// pixel shader //////////////////

float ClipHistory(half3 cHistory, half3 cM, half3 cMin, half3 cMax)
{
	// Clip color difference against neighborhood min/max AABB
	// Clipped color is cHistory + rayDir * result
	
	float3 boxCenter = (cMax + cMin) * 0.5;
	float3 boxExtents = cMax - boxCenter;
	
	float3 rayDir = cM - cHistory;
	float3 rayOrg = cHistory - boxCenter;
	
	return saturate(IntersectAABB(rayDir, rayOrg, boxExtents));
}

float3 FilterHistory(Texture2D<float4> tex, SamplerState sampSt, float2 texcoord, float4 texSize)
{
	const float Sharpening = 0.0;  // [-0.5, 0.5]

	float2 samplePos = texcoord * texSize.xy;
	float2 tc1 = floor(samplePos - 0.5) + 0.5;
	float2 f = samplePos - tc1;
	float2 f2 = f * f;
	float2 f3 = f * f2;

	// Catmull-Rom weights
	const float c = 0.5 + Sharpening;
	float2 w0 = -(c)       * f3 + (2.0 * c)        * f2 - (c * f);
	float2 w1 =  (2.0 - c) * f3 - (3.0 - c)        * f2            + 1.0;
	float2 w2 = -(2.0 - c) * f3 + (3.0 -  2.0 * c) * f2 + (c * f);
	float2 w3 =  (c)       * f3 - (c)              * f2;

	float2 w12  = w1 + w2;
	float2 tc0  = (tc1 - 1.0)      * texSize.zw;
	float2 tc3  = (tc1 + 2.0)      * texSize.zw;
	float2 tc12 = (tc1 + w2 / w12) * texSize.zw;
	
	// Bicubic filter using bilinear lookups, skipping the 4 corner texels
	float4 filtered = float4(GetTexture2D(tex, sampSt, float2(tc12.x, tc0.y )).rgb, 1.0) * (w12.x *  w0.y) +
	                  float4(GetTexture2D(tex, sampSt, float2(tc0.x,  tc12.y)).rgb, 1.0) * ( w0.x * w12.y) +
	                  float4(GetTexture2D(tex, sampSt, float2(tc12.x, tc12.y)).rgb, 1.0) * (w12.x * w12.y) +  // Center pixel
	                  float4(GetTexture2D(tex, sampSt, float2(tc3.x,  tc12.y)).rgb, 1.0) * ( w3.x * w12.y) +
	                  float4(GetTexture2D(tex, sampSt, float2(tc12.x, tc3.y )).rgb, 1.0) * (w12.x *  w3.y);
	
	return filtered.rgb * rcp(filtered.a);
}


Texture2D<float4> PostAA_LDRNatTarg       : register(t0);
Texture2D<float4> PostAA_PrvNatTarg       : register(t1);
SamplerState PostAA_CPSS                  : register(s0);   //LinearClamp
SamplerState PostAA_LVSS                  : register(s1);   //PointClamp 

Texture2D<float4> PostAA_LinDpth          : register(t2);
Texture2D<float4> PostAA_VelObj           : register(t3);

Texture2D<float4> PostAA_DepthTex         : register(t16);

cbuffer CBPostAA : register(b0)
{
	struct TemporalAAConstants
	{
		float4x4 matReprojection;
		float4   params;
		float4   screenSize;
	} cbPostAA;
};

pixout PostAA_PS(vtxOutAA IN)
{
	pixout OUT = (pixout) 0;

	const float2 tc = IN.baseTC.xy;
	const float2 texel = cbPostAA.screenSize.zw;
	
	// Compute velocity vector for static geometry
	#if %_RT_PROJECTION_MULTI_RES || %_RT_PROJECTION_LENS_MATCHED
		float2 sourcePos = MapViewportToUnnormalizedRaster(tc);
		float depth = PostAA_DepthTex.Load(int3(sourcePos, 0));
		#if %_RT_PROJECTION_LENS_MATCHED
			// Correct for LMS warping
			depth = MapUnnormalizedRasterToClip(sourcePos, depth).z;
		#endif
	#else
		float depth = PostAA_DepthTex.Load(int3(IN.WPos.xy, 0));
		
		#if %_RT_SAMPLE3 || !%_RT_SAMPLE2
			// Dilate depth to improve moving silhouette edges
			float depth1 = PostAA_DepthTex.Load(int3(IN.WPos.xy, 0), int2(-1, -1));
			float depth2 = PostAA_DepthTex.Load(int3(IN.WPos.xy, 0), int2( 1, -1));
			float depth3 = PostAA_DepthTex.Load(int3(IN.WPos.xy, 0), int2(-1,  1));
			float depth4 = PostAA_DepthTex.Load(int3(IN.WPos.xy, 0), int2( 1,  1));
			depth = max(max(max(max(depth1, depth2), depth3), depth4), depth);
		#endif
	#endif

	float4 vPosHPrev = mul(float4(IN.baseTC.xy, depth, 1.0), cbPostAA.matReprojection);
	vPosHPrev.xy /= vPosHPrev.w;
	
	float2 v = vPosHPrev.xy - tc;
	
	float2 multiresTC = MapViewportToRaster(tc);

	float2 vObj = GetTexture2D(PostAA_VelObj, PostAA_LVSS, multiresTC);
	if (vObj.x != 0)
	{
		v = DecodeMotionVector(vObj);
		multiresTC += v;
		float2 prevTC = MapRasterToViewport(multiresTC);
		v = prevTC - tc;
	}
	
	const bool offscreen = max(abs((tc.x + v.x) * 2 - 1), abs((tc.y + v.y) * 2 - 1)) >= 1.0;

	// Curr frame and neighbor texels
	half3 cM  = PostAA_LDRNatTarg.Load(int3(IN.WPos.xy, 0));

	half3 cTL = PostAA_LDRNatTarg.Load(int3(IN.WPos.xy, 0), int2(-1, -1));
	half3 cTR = PostAA_LDRNatTarg.Load(int3(IN.WPos.xy, 0), int2( 1, -1));
	half3 cBL = PostAA_LDRNatTarg.Load(int3(IN.WPos.xy, 0), int2(-1,  1));
	half3 cBR = PostAA_LDRNatTarg.Load(int3(IN.WPos.xy, 0), int2( 1,  1));

#if %_RT_SAMPLE2
	half3 cBlur = (cTL + cTR + cBL + cBR) * 0.25f;
	cM = saturate(lerp(cBlur, cM, cbPostAA.params.x));
#endif

	// Default result: current color + no history weight
	OUT.Color.rgb = cM;
	
	// Prev frame texel (fall back to current pixel if offsceen)
	[branch] if (!offscreen)
	{
		half4 cHistory = GetTexture2D(PostAA_PrvNatTarg, PostAA_CPSS, tc + v);

#if %_RT_SAMPLE3
		// TSAA
		const float fMaxWeightL = 0.25;
		const float fMaxWeightH = 0.08;
	
		half3 cLL = PostAA_LDRNatTarg.Load(int3(IN.WPos.xy, 0), int2(-1,  0));
		half3 cRR = PostAA_LDRNatTarg.Load(int3(IN.WPos.xy, 0), int2( 1,  0));
		half3 cTT = PostAA_LDRNatTarg.Load(int3(IN.WPos.xy, 0), int2( 0, -1));
		half3 cBB = PostAA_LDRNatTarg.Load(int3(IN.WPos.xy, 0), int2( 0,  1));
	
		// Keep the .w, replace the color
		cHistory.rgb = FilterHistory(PostAA_PrvNatTarg, PostAA_CPSS, tc + v, cbPostAA.screenSize);
	
		// Compute color variance
		const half3 m1 = cTL + cTR + cBL + cBR + cLL + cRR + cTT + cBB + cM;
		const half3 m2 = cTL*cTL + cTR*cTR + cBL*cBL + cBR*cBR + cLL*cLL + cRR*cRR + cTT*cTT + cBB*cBB + cM*cM;
		const half3 mean = m1 / 9;
		const half3 stddev = sqrt(m2 / 9 - mean * mean);
		const half3 cMin = mean - 1.0 * stddev;
		const half3 cMax = mean + 1.0 * stddev;
	
		float clipLength = ClipHistory(cHistory.rgb, cM, cMin, cMax);
	
		// Try to identify subpixel changes
		half4 prevTL = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2(-1.0f, -1.0f), 0, 0));
		half4 prevTR = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2( 1.0f, -1.0f), 0, 0));
		half4 prevBL = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2(-1.0f,  1.0f), 0, 0));
		half4 prevBR = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2( 1.0f,  1.0f), 0, 0));
		
		half4 prevTT = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2( 0.0f, -1.0f), 0, 0));
		half4 prevBB = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2( 0.0f,  1.0f), 0, 0));
		half4 prevLL = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2(-1.0f,  0.0f), 0, 0));
		half4 prevRR = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2( 1.0f,  0.0f), 0, 0));
		
		float neighborDiff1 =
			length(clamp(prevTL.rgb, cMin, cMax) - prevTL.rgb) + length(clamp(prevTR.rgb, cMin, cMax) - prevTR.rgb) +
			length(clamp(prevBL.rgb, cMin, cMax) - prevBL.rgb) + length(clamp(prevBR.rgb, cMin, cMax) - prevBR.rgb);
		float neighborDiff2 =
			length(clamp(prevTT.rgb, cMin, cMax) - prevTT.rgb) + length(clamp(prevBB.rgb, cMin, cMax) - prevBB.rgb) +
			length(clamp(prevLL.rgb, cMin, cMax) - prevLL.rgb) + length(clamp(prevRR.rgb, cMin, cMax) - prevRR.rgb);
		
		float neighborDiff = min(neighborDiff1, neighborDiff2);
		if (neighborDiff < cbPostAA.params.x)
			clipLength = 0;
	
		// Apply color clipping
		cHistory.rgb = lerp(cHistory.rgb, cM, clipLength);
	
		half prevBlend = (cHistory.w + prevTL.w + prevTR.w + prevBL.w + prevBR.w + prevTT.w + prevBB.w + prevLL.w + prevRR.w) / 9.0;
		cHistory.w = saturate(neighborDiff * 10) * 0.10 + prevBlend * 0.90;

		// How much of History do we want? 0.25 to 0.08, Low frequency means take more from the History.
		float weight = lerp(fMaxWeightL, fMaxWeightH, saturate(cHistory.w * cbPostAA.params.y));
	
		OUT.Color.rgb = lerp(cHistory.rgb, cM, weight);
		OUT.Color.a = cHistory.w;

#elif %_RT_SAMPLE2
		// SMAA 1TX Mode
		const float fMaxFramesL = cbPostAA.params.z;		// Frames to keep in history (low freq). Higher = less aliasing, but blurier result. Lower = sharper result, but more aliasing.
		const float fMaxFramesH = cbPostAA.params.w;		// Frames to keep in history (high freq). Higher = less aliasing, but blurier result. Lower = sharper result, but more aliasing.
	
		const half3 cMin = min(min(min(min(cTL, cTR), cBL), cBR), cM);
		const half3 cMax = max(max(max(max(cTL, cTR), cBL), cBR), cM);	

		cHistory.rgb = clamp(cHistory.rgb, cMin, cMax); // Limit acc buffer color range to current frame

		// How much of History do we want? Low frequency means take more from the History.
		float3 cHiFreq = sqrt(abs(cBlur.rgb - cM.rgb));
		float weight = saturate(rcp(lerp(fMaxFramesL, fMaxFramesH, cHiFreq)));

		OUT.Color.rgb = lerp(cHistory.rgb, cM, weight);
		OUT.Color.a = 1 - weight; // debug output

#else
		// New SMAA 2TX Mode
		const float fMaxFramesL = 2.5;		// Frames to keep in history (low freq). Higher = less aliasing, but blurier result. Lower = sharper result, but more aliasing.
		const float fMaxFramesH = 5.0;		// Frames to keep in history (high freq). Higher = less aliasing, but blurier result. Lower = sharper result, but more aliasing.

		const half3 cMin = min(min(min(min(cTL, cTR), cBL), cBR), cM);
		const half3 cMax = max(max(max(max(cTL, cTR), cBL), cBR), cM);
	
		float clipLength = ClipHistory(cHistory.rgb, cM, cMin, cMax);

		// Try to identify subpixel changes
		half3 prevTL = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2(-1.0f, -1.0f), 0, 0));
		half3 prevTR = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2( 1.0f, -1.0f), 0, 0));
		half3 prevBL = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2(-1.0f,  1.0f), 0, 0));
		half3 prevBR = GetTexture2DLod(PostAA_PrvNatTarg, PostAA_CPSS, float4(tc + v + texel * float2( 1.0f,  1.0f), 0, 0));
		
		float neighborDiff =
			length(clamp(prevTL, cMin, cMax) - prevTL) + length(clamp(prevTR, cMin, cMax) - prevTR) +
			length(clamp(prevBL, cMin, cMax) - prevBL) + length(clamp(prevBR, cMin, cMax) - prevBR);
		
		if (neighborDiff < 0.02) clipLength = 0;
	
		// Apply color clipping
		cHistory.rgb = lerp(cHistory.rgb, cM, clipLength);
	
		// How much of History do we want? 0.20 to 0.40, Low frequency means take more from the History.
		float cHiFreq = saturate(length(cHistory.rgb - cM) * 10);
		float weight = rcp(lerp(fMaxFramesL, fMaxFramesH, cHiFreq));

		OUT.Color.rgb = lerp(cHistory.rgb, cM, weight);
		OUT.Color.a = 0;

#endif
	}

	return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
// SMAA

Texture2D<float3> LumEdSMAA_Source : register(t0); 

// medium quality
#define SMAA_MAX_SEARCH_STEPS 8
#define SMAA_MAX_SEARCH_STEPS_DIAG 0
#define SMAA_CORNER_ROUNDING 0

// high quality
//#define SMAA_MAX_SEARCH_STEPS 16
//#define SMAA_MAX_SEARCH_STEPS_DIAG 8
//#define SMAA_CORNER_ROUNDING 25

#define SMAA_AREATEX_MAX_DISTANCE 16
#define SMAA_AREATEX_MAX_DISTANCE_DIAG 20

#define SMAA_AREATEX_SUBTEX_SIZE 0.1428571

#define SCALE_PIXELSIZE 2

float2 LumaEdgeDetectionSMAA_PS(vtxOut IN) : SV_Target
{
	const int3 vPixCoord = int3(IN.WPos.xy, 0);

	// Calculate lumas:
	const half3 weights = GetLuminanceWeights();
	half L     = SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord, int2( 0, 0)), weights);
	half Lleft = SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord, int2(-1, 0)), weights);
	half Ltop  = SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord, int2(0, -1)), weights);

	// We do the usual threshold:
	half4 delta;
	delta.xy = abs(L.xx - half2(Lleft, Ltop));
	half2 edges = step(vParams.x, delta.xy);

	// Then discard if there is no edge:
	if (dot(edges, 1.0h) == 0.0h)
		discard;// this supported on cg ? else clip(-1)

	// Calculate right and bottom deltas:
	half Lright   = SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord, int2(1, 0)), weights);
	half Lbottom  = SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord, int2(0, 1)), weights);
	delta.zw = abs(L.xx - half2(Lright, Lbottom));

	// Calculate the maximum delta in the direct neighborhood:
	half maxDelta = max(max(max(delta.x, delta.y), delta.z), delta.w);

	// Calculate left-left and top-top deltas:
	half Lleftleft = SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord, int2(-2, 0)), weights);
	half Ltoptop   = SRGBToLinearApproximation(LumEdSMAA_Source.Load(vPixCoord, int2(0, -2)), weights);
	delta.zw = abs(half2(Lleft, Ltop) - half2(Lleftleft, Ltoptop));

	// Calculate the final maximum delta:
	maxDelta = max(max(maxDelta, delta.z), delta.w);
	edges.xy *= step(0.5 * maxDelta, delta.xy);

	return edges;
}

// Diagonal Search Functions

#if SMAA_MAX_SEARCH_STEPS_DIAG || SMAA_FORCE_DIAGONAL_DETECTION

// These functions allows to perform diagonal pattern searches. 
short SMAASearchDiag1(Texture2D<float2> edgesTex, short2 vPixCoord, short2 dir, bool c)
{
	short2 offset = dir;
	float2 e = 0;
	short i = 0;
	for (i = 0; i < SMAA_MAX_SEARCH_STEPS_DIAG; i++) 
	{
		e.rg = edgesTex.Load(int3(vPixCoord, 0), offset).rg;
		[flatten] if (dot(e, 1.0) < 1.9) break;
		offset += dir;
	}
	return i + (e.g > 0.9) && c;
}

short SMAASearchDiag2(Texture2D<float2> edgesTex, short2 vPixCoord, short2 dir, bool c) 
{
	short2 offset = dir;
	float2 e = 0;
	short i = 0;
	for (i = 0; i < SMAA_MAX_SEARCH_STEPS_DIAG; i++) 
	{
		e.g = edgesTex.Load(int3(vPixCoord, 0), offset).g;
		e.r = edgesTex.Load(int3(vPixCoord, 0), offset + int2(1, 0)).r;
		[flatten] if (dot(e, 1.0) < 1.9) break;
		offset += dir;
	}
	return i + (e.g > 0.9) && c;
}

float2 SMAAAreaDiag(Texture2D<float4> areaTex, SamplerState sampSt, short2 distance, float2 e, float offset) 
{
	float2 texcoord = SMAA_AREATEX_MAX_DISTANCE_DIAG * e + distance;

	float2 SMAA_AREATEX_PIXEL_SIZE = 1.0 / float2(160.0, 560.0);

	// We do a scale and bias for mapping to texel space:
	texcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + (0.5 * SMAA_AREATEX_PIXEL_SIZE);

	// Diagonal areas are on the second half of the texture:
	texcoord.x += 0.5;

	// Move to proper place, according to the subpixel offset:
	texcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;

	return GetTexture2DLod(areaTex, sampSt, float4(texcoord, 0, 0) ).rg;
}

//This searches for diagonal patterns and returns the corresponding weights.
float2 SMAACalculateDiagWeights(Texture2D<float2> edgesTex, SamplerState sampStE, Texture2D<float4>  areaTex, SamplerState sampStA, short2 vPixCoord, float4 ScreenSize, float2 texcoord, float2 e, half4 subsampleIndices) 
{
	float2 weights = 0.0;
	
	float right = edgesTex.Load(int3(vPixCoord, 0), int2(1, 0)).r;
	short2 d;

	d.x = e.r ? SMAASearchDiag1(edgesTex, vPixCoord, short2(-1, 1), true) : 0;
	d.y =       SMAASearchDiag1(edgesTex, vPixCoord, short2(1, -1), false);

	[branch]
	if (d.r + d.g > 2)  // d.r + d.g + 1 > 3
	{ 
		short4 coords = vPixCoord.xyxy + short4(-d.r, d.r, d.g, -d.g);

		float4 c;
		c.x = edgesTex.Load(int3(coords.xy, 0), int2(-1,  0)).g;
		c.y = edgesTex.Load(int3(coords.xy, 0), int2( 0,  0)).r;
		c.z = edgesTex.Load(int3(coords.zw, 0), int2( 1,  0)).g;
		c.w = edgesTex.Load(int3(coords.zw, 0), int2( 1, -1)).r;
		float2 e = 2.0 * c.xz + c.yw;
		e *= step(d.rg, SMAA_MAX_SEARCH_STEPS_DIAG - 1);

		weights += SMAAAreaDiag(areaTex, sampStA, d, e, subsampleIndices.z);
	}

	d.x =         SMAASearchDiag2(edgesTex, vPixCoord, short2(-1, -1), false);
	d.y = right ? SMAASearchDiag2(edgesTex, vPixCoord, short2( 1,  1), true) : 0;

	[branch]
	if (d.r + d.g > 2)  // d.r + d.g + 1 > 3
	{ 
		short4 coords = vPixCoord.xyxy + short4(-d.r, -d.r, d.g, d.g);

		float4 c;
		c.x  = edgesTex.Load(int3(coords.xy, 0), int2(-1,  0)).g;
		c.y  = edgesTex.Load(int3(coords.xy, 0), int2( 0, -1)).r;
		c.zw = edgesTex.Load(int3(coords.zw, 0), int2( 1,  0)).gr;
		float2 e = 2.0 * c.xz + c.yw;
		e *= step(d.rg, SMAA_MAX_SEARCH_STEPS_DIAG - 1);

		weights += SMAAAreaDiag(areaTex, sampStA, d, e, subsampleIndices.w).gr;
	}

	return weights;
}

#endif

// Horizontal/Vertical Search Functions
float SMAASearchLength(Texture2D<float4> searchTex, SamplerState sampStS, float2 e, float bias, float scale) 
{
  e.r = bias + e.r * scale;
  return 255.0 * GetTexture2DLod(searchTex, sampStS, float4(e, 0, 0)).r;//r;
}

float SMAASearchXLeft(Texture2D<float2> edgesTex, SamplerState sampStE, Texture2D<float4> searchTex, SamplerState sampStS, float4 ScreenSize, float2 texcoord, float end) 
{   
  float2 e = float2(0.0, 1.0);
  while (texcoord.x > end && 
         e.g > 0.8281 && // Is there some edge not activated?
         e.r == 0.0) { // Or is there a crossing edge that breaks the line?
      e = GetTexture2DLod(edgesTex, sampStE, float4(texcoord, 0, 0)).rg;
      texcoord -= float2(2.0, 0.0) * ScreenSize.zw;
  }

  // We correct the previous (-0.25, -0.125) offset we applied:
  texcoord.x += 0.25 * ScreenSize.z;

  // The searches are bias by 1, so adjust the coords accordingly:
  texcoord.x += ScreenSize.z;

  // Disambiguate the length added by the last step:
  texcoord.x += 2.0 * ScreenSize.z; // Undo last step
  texcoord.x -= ScreenSize.z * SMAASearchLength(searchTex, sampStS, e, 0.0, 0.5);

  return texcoord.x;
}

float SMAASearchXRight(Texture2D<float2> edgesTex, SamplerState sampStE, Texture2D<float4> searchTex, SamplerState sampStS, float4 ScreenSize, float2 texcoord, float end) 
{
	//PS_ScreenSize.zw *= SCALE_PIXELSIZE;

  float2 e = float2(0.0, 1.0);
  while (texcoord.x < end && 
         e.g > 0.8281 && // Is there some edge not activated?
         e.r == 0.0) { // Or is there a crossing edge that breaks the line?
      e = GetTexture2DLod(edgesTex, sampStE, float4(texcoord, 0, 0)).rg;
      texcoord += float2(2.0, 0.0) * ScreenSize.zw;
  }

  texcoord.x -= 0.25 * ScreenSize.z;
  texcoord.x -= ScreenSize.z;
  texcoord.x -= 2.0 * ScreenSize.z;
  texcoord.x += ScreenSize.z * SMAASearchLength(searchTex, sampStS, e, 0.5, 0.5);
  return texcoord.x;
}

float SMAASearchYUp(Texture2D<float2> edgesTex, SamplerState sampStE, Texture2D<float4> searchTex, SamplerState sampStS, float4 ScreenSize, float2 texcoord, float end)
{
  float2 e = float2(1.0, 0.0);
  while (texcoord.y > end && 
         e.r > 0.8281 && // Is there some edge not activated?
         e.g == 0.0) { // Or is there a crossing edge that breaks the line?
      e = GetTexture2DLod(edgesTex, sampStE, float4(texcoord, 0, 0)).rg;
      texcoord -= float2(0.0, 2.0) * ScreenSize.zw;
  }

  texcoord.y += 0.25 * ScreenSize.w;
  texcoord.y += ScreenSize.w;
  texcoord.y += 2.0 * ScreenSize.w;
  texcoord.y -= ScreenSize.w * SMAASearchLength(searchTex, sampStS, e.gr, 0.0, 0.5);
  return texcoord.y;
}

float SMAASearchYDown(Texture2D<float2> edgesTex, SamplerState sampStE, Texture2D<float4> searchTex, SamplerState sampStS, float4 ScreenSize, float2 texcoord, float end) 
{
  float2 e = float2(1.0, 0.0);
  while (texcoord.y < end && 
         e.r > 0.8281 && // Is there some edge not activated?
         e.g == 0.0) { // Or is there a crossing edge that breaks the line?
      e = GetTexture2DLod(edgesTex, sampStE, float4(texcoord, 0, 0)).rg;
      texcoord += float2(0.0, 2.0) * ScreenSize.zw;
  }
  
  texcoord.y -= 0.25 * ScreenSize.w;
  texcoord.y -= ScreenSize.w;
  texcoord.y -= 2.0 * ScreenSize.w;
  texcoord.y += ScreenSize.w * SMAASearchLength(searchTex, sampStS, e.gr, 0.5, 0.5);
  return texcoord.y;
}

//Ok, we have the distance and both crossing edges. So, what are the areas
//at each side of current edge? 
float2 SMAAArea(Texture2D<float4> areaTex, SamplerState sampStA, float2 distance, float e1, float e2, float offset) 
{
  // Rounding prevents precision errors of bilinear filtering:
  float2 texcoord = SMAA_AREATEX_MAX_DISTANCE * round(4.0 * float2(e1, e2)) + distance;
  
	float2 SMAA_AREATEX_PIXEL_SIZE = 1.0 / float2(160.0, 560.0);

  // We do a scale and bias for mapping to texel space:
  texcoord = SMAA_AREATEX_PIXEL_SIZE * texcoord + (0.5 * SMAA_AREATEX_PIXEL_SIZE);

  // Move to proper place, according to the subpixel offset:
  texcoord.y += SMAA_AREATEX_SUBTEX_SIZE * offset;

  return GetTexture2DLod(areaTex, sampStA, float4(texcoord, 0, 0)).rg;
}

// Corner Detection Functions
void SMAADetectHorizontalCornerPattern(Texture2D<float2> edgesTex, SamplerState sampStE, inout float2 weights, float4 ScreenSize, float2 texcoord, float2 d) 
{
#if SMAA_CORNER_ROUNDING || SMAA_FORCE_CORNER_DETECTION

    float4 coords = mad(float4(d.x, 0.0, d.y, 0.0),
                        ScreenSize.zwzw, texcoord.xyxy);
    float2 e;
    e.r = GetTexture2DLod(edgesTex, sampStE, float4(coords.xy + float2(0.0,  1.0) * ScreenSize.zw, 0, 0) ).r;
    bool left = abs(d.x) < abs(d.y);
    e.g = GetTexture2DLod(edgesTex, sampStE, float4(coords.xy + float2(0.0, -2.0)* ScreenSize.zw, 0, 0) ).r;
    if (left) 
			weights *= saturate(SMAA_CORNER_ROUNDING / 100.0 + 1.0 - e);

    e.r = GetTexture2DLod(edgesTex, sampStE, float4(coords.zw + float2(1.0,  1.0)* ScreenSize.zw, 0, 0) ).r;
    e.g = GetTexture2DLod(edgesTex, sampStE, float4(coords.zw + float2(1.0, -2.0)* ScreenSize.zw, 0, 0) ).r;
    if (!left) 
			weights *= saturate(SMAA_CORNER_ROUNDING / 100.0 + 1.0 - e);

#endif
}

void SMAADetectVerticalCornerPattern(Texture2D<float2> edgesTex, SamplerState sampStE, inout float2 weights, float4 ScreenSize, float2 texcoord, float2 d) 
{
#if SMAA_CORNER_ROUNDING || SMAA_FORCE_CORNER_DETECTION

    float4 coords = mad(float4(0.0, d.x, 0.0, d.y),
                        ScreenSize.zwzw, texcoord.xyxy);
    float2 e;
    e.r = GetTexture2DLod(edgesTex, sampStE, float4(coords.xy+float2( 1.0, 0.0)*ScreenSize.zw, 0, 0) ).g;
    bool left = abs(d.x) < abs(d.y);
    e.g = GetTexture2DLod(edgesTex, sampStE, float4(coords.xy+float2(-2.0, 0.0)*ScreenSize.zw, 0, 0) ).g;
    if (left) 
			weights *= saturate(SMAA_CORNER_ROUNDING / 100.0 + 1.0 - e);

    e.r = GetTexture2DLod(edgesTex, sampStE, float4(coords.zw+float2( 1.0, 1.0)*ScreenSize.zw, 0, 0) ).g;
    e.g = GetTexture2DLod(edgesTex, sampStE, float4(coords.zw+float2(-2.0, 1.0)*ScreenSize.zw, 0, 0) ).g;
    if (!left) 
			weights *= saturate(SMAA_CORNER_ROUNDING / 100.0 + 1.0 - e);

#endif
}

Texture2D<float2> BlndWgtSMAA_Edge           : register(t0); 
Texture2D<float4> BlndWgtSMAA_Area           : register(t1); 
SamplerState BlndWgtSMAA_EdSampler           : register(s1); // linearclamp

Texture2D<float4> BlndWgtSMAA_Srch           : register(t2); 
SamplerState BlndWgtSMAA_SrSampler           : register(s0); // pointclamp

// Second pass: Blending Weight Calculation
pixout BlendWeightSMAA_PS(vtxOut IN)
{
	pixout OUT = (pixout) 0;
	// tex0 = edgesTex
	// tex1 = areaTex
	// tex2 = searchTex

  float4 weights = 0.0;
	
	// todo prebake on vs
	float4 ScreenSize = PS_ScreenSize;  //PS_ScreenSize cannot be modified unless Compatibility Mode is on!!
	ScreenSize.zw *= SCALE_PIXELSIZE;

	float2 pixcoord = IN.WPos.xy;	
	float4 offset[3] =
	{
		float4(IN.baseTC.xyxy + float4(-0.25, -0.125,  1.25, -0.125) * ScreenSize.zwzw),
		float4(IN.baseTC.xyxy + float4(-0.125, -0.25, -0.125,  1.25) * ScreenSize.zwzw),
		float4(IN.baseTC.xyxy)
	};

	offset[2] = float4(offset[0].xz, offset[1].yw) + float4(-2, 2, -2, 2) * ScreenSize.zzww * SMAA_MAX_SEARCH_STEPS;

	const short2 vPixCoord = short2(IN.WPos.xy);
	float2 e = BlndWgtSMAA_Edge.Load(int3(vPixCoord, 0));
	const float4 vSubSampleIndices = 0;

  [branch]
  if (e.g > 0.0h) // Edge at north
	{ 
      #if SMAA_MAX_SEARCH_STEPS_DIAG || SMAA_FORCE_DIAGONAL_DETECTION
      weights.rg = SMAACalculateDiagWeights(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, BlndWgtSMAA_Area, BlndWgtSMAA_EdSampler, vPixCoord, ScreenSize, IN.baseTC.xy, e, vSubSampleIndices);

      // We give priority to diagonals, so if we find a diagonal we skip 
      // horizontal/vertical processing.
      [branch]
      if (dot(weights.rg, 1.0) == 0.0) {

      #endif

      float2 d;

      // Find the distance to the left:
      float2 coords;
      coords.x = SMAASearchXLeft(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, BlndWgtSMAA_Srch, BlndWgtSMAA_SrSampler, ScreenSize, offset[0].xy, offset[2].x);
      coords.y = offset[1].y;
      d.x = coords.x;

      // Now fetch the left crossing edges, two at a time using bilinear
      // filtering. Sampling at -0.25 (see @CROSSING_OFFSET) enables to
      // discern what value each edge has:
      float e1 = GetTexture2DLod(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, float4(coords, 0, 0)).r; //IN.baseTC.xy

      // Find the distance to the right:
      coords.x = SMAASearchXRight(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, BlndWgtSMAA_Srch, BlndWgtSMAA_SrSampler, ScreenSize, offset[0].zw, offset[2].y);
      d.y = coords.x; //IN.baseTC.x;

      // We want the distances to be in pixel units (doing this here allow to
      // better interleave arithmetic and memory accesses):
      d = d / ScreenSize.z - pixcoord.x;

      // SMAAArea below needs a sqrt, as the areas texture is compressed 
      // quadratically:
      float2 sqrt_d = sqrt(abs(d));

      // Fetch the right crossing edges:
      float e2 = GetTexture2DLod(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, float4(coords + float2(1, 0) * ScreenSize.zw, 0, 0)).r;; //IN.baseTC.xy

      // Ok, we know how this pattern looks like, now it is time for getting
      // the actual area:
      weights.rg = SMAAArea(BlndWgtSMAA_Area, BlndWgtSMAA_EdSampler, sqrt_d, e1, e2, vSubSampleIndices.y);

      // Fix corners:
      SMAADetectHorizontalCornerPattern(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, weights.rg, ScreenSize, IN.baseTC.xy, d); //texcoord

      #if SMAA_MAX_SEARCH_STEPS_DIAG || SMAA_FORCE_DIAGONAL_DETECTION

      } 
			else
			{
          e.r = 0.0; // Skip vertical processing.
			}

      #endif
  }

  [branch]
  if (e.r > 0.0f)		// Edge at west
	{ 
      float2 d;

      // Find the distance to the top:
      float2 coords;
      coords.y = SMAASearchYUp(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, BlndWgtSMAA_Srch, BlndWgtSMAA_SrSampler, ScreenSize, offset[1].xy, offset[2].z);
      coords.x = offset[0].x;
      d.x = coords.y;

      // Fetch the top crossing edges:
      float e1 = GetTexture2DLod(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, float4(coords, 0, 0)).g;

      // Find the distance to the bottom:
      coords.y = SMAASearchYDown(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, BlndWgtSMAA_Srch, BlndWgtSMAA_SrSampler, ScreenSize, offset[1].zw, offset[2].w);
      d.y = coords.y;

      // We want the distances to be in pixel units:
      d = d / ScreenSize.w - pixcoord.y;

      // SMAAArea below needs a sqrt, as the areas texture is compressed 
      // quadratically:
      float2 sqrt_d = sqrt(abs(d));

      // Fetch the bottom crossing edges:
      float e2 = GetTexture2DLod(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, float4(coords + float2(0, 1)*ScreenSize.zw, 0, 0)).g;

      // Get the area for this direction:
      weights.ba = SMAAArea(BlndWgtSMAA_Area, BlndWgtSMAA_EdSampler, sqrt_d, e1, e2, vSubSampleIndices.x);

      // Fix corners:
      SMAADetectVerticalCornerPattern(BlndWgtSMAA_Edge, BlndWgtSMAA_EdSampler, weights.ba, ScreenSize, IN.baseTC.xy, d);
  }

	OUT.Color = weights;//*10;

  return OUT;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Texture2D<float4> NbrBlndSMAA_Wgt            : register(t0); 
 
Texture2D<float4> NbrBlndSMAA_Trg            : register(t1); 
SamplerState NBRBlndSMAA_TSampler            : register(s1); // pointclamp

pixout NeighborhoodBlendingSMAA_PS(vtxOut IN)
{
	pixout OUT = (pixout) 0;
	
	const int3 vPixCoord = int3(IN.WPos.xy, 0);

	// Fetch the blending weights for current pixel:
	float4 topLeft = NbrBlndSMAA_Wgt.Load(vPixCoord);
	float bottom   = NbrBlndSMAA_Wgt.Load(vPixCoord, int2(0, 1)).g;
	float right    = NbrBlndSMAA_Wgt.Load(vPixCoord, int2(1, 0)).a;
	float4 a = float4(topLeft.r, bottom, topLeft.b, right);

	[branch]
	if (dot(a, 1.0) < 1e-5)
	{
		OUT.Color = NbrBlndSMAA_Trg.Load(vPixCoord);
		return OUT;
	}
	else 
	{
		// Up to 4 lines can be crossing a pixel (one through each edge). We
		// favor blending by choosing the line with the maximum weight for each
		// direction:
		float2 offset;
		offset.x = a.a > a.b ? a.a : -a.b; // left vs. right 
		offset.y = a.g > a.r ? a.g : -a.r; // top vs. bottom

		// Then we go in the direction that has the maximum weight:
		if (abs(offset.x) > abs(offset.y)) // horizontal vs. vertical
			offset.y = 0.0;
		else
			offset.x = 0.0;

		// Fetch the opposite color and lerp by hand:
		float4 C =   NbrBlndSMAA_Trg.Load(vPixCoord);
		float4 Cop = NbrBlndSMAA_Trg.Load(vPixCoord + int3(sign(offset), 0));
			
		// convert to linear
		#if DURANGO
		C  .rgb = REC709ToLinear(C  .rgb);
		Cop.rgb = REC709ToLinear(Cop.rgb);
		#else
		C  .rgb = SRGBToLinear(C  .rgb);
		Cop.rgb = SRGBToLinear(Cop.rgb);
		#endif

		float s = abs(offset.x) > abs(offset.y) ? abs(offset.x) : abs(offset.y);
		OUT.Color = lerp(C, Cop, s);

		// convert back to gamma 2.0
		#if DURANGO
		OUT.Color.rgb = LinearToREC709(OUT.Color.rgb);
		#else
		OUT.Color.rgb = LinearToSRGB(OUT.Color.rgb);
		#endif

		return OUT;
	}

	return OUT;
}

////////////////// technique /////////////////////

technique PostAA
{
  pass p0
  {
    VertexShader = PostAA_VS() PostAA_VS;
    PixelShader = PostAA_PS() PostAA_PS;
    CullMode = None;        
  }
}

// SMAA

technique LumaEdgeDetectionSMAA
{
  pass p0
  {
    VertexShader = FullscreenTriVS();
    PixelShader = LumaEdgeDetectionSMAA_PS() PostAA_PS;
    CullMode = None;        
  }
}

technique BlendWeightSMAA
{
  pass p0
  {
    VertexShader = FullscreenTriVS();
    PixelShader = BlendWeightSMAA_PS() PostAA_PS;
    CullMode = None;        
  }
}

technique NeighborhoodBlendingSMAA
{
  pass p0
  {
    VertexShader = FullscreenTriVS() PostAA_VS;
    PixelShader = NeighborhoodBlendingSMAA_PS() PostAA_PS;
    CullMode = None;        
  }
}

//////////////////////// 
// Debug modes for MSAA
Texture2D<float4> MSAA_Dbg                 : register(t0); 
SamplerState MSAA_DbgSampler               : register(s0);

pixout MsaaDebugPS(vtxOut IN)
{
  pixout OUT = (pixout) 0;
  half4 c0 = GetTexture2D(MSAA_Dbg, MSAA_DbgSampler, IN.baseTC.xy).x; 
#if !%_RT_SAMPLE0
	clip(c0.x-0.5);
#endif
	OUT.Color = half4(c0.x, 0, 0, 1);
  return OUT;
}

technique MsaaDebug
{
  pass p0
  {
    VertexShader = FsQuadVS() PostAA_VS;
    PixelShader = MsaaDebugPS() PostAA_PS;
  }
}


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

Texture2D<float4> PAAComp_CurTarg         : register(t0);
Texture2D<float4> PAAComp_ClrChart        : register(t8);
SamplerState PAAComp_CCSS                 : register(s0);   //LinearClamp

Texture2D<float4> PAAComp_LensOpt         : register(t5);
Texture2D<float4> PAAComp_LumTex          : register(t7);
SamplerState PAAComp_LLSS                 : register(s1);   //PointClamp 

Texture3D<float4> PostAA_Grain            : register(t6);
SamplerState PostAA_GrainSS               : register(s2);   //PointWrap 


float4 HDRParams;
float4 HDREyeAdaptation;
float Time = {PB_time};

// Grain technique was moved out of HDR post process, since TAA filters pixel sized noise out
void ApplyFilmGrain(inout half4 cScene, in half3 cColor, float4 WPos, float4 baseTC)
{
	// Film grain simulation
	half fFilmGrain = PostAA_Grain.Sample(PostAA_GrainSS, float4(baseTC.xy * 4.0f * float2(PS_ScreenSize.x / PS_ScreenSize.y, 1.0f), Time * 3, 0)).x;
	fFilmGrain = lerp(0.5h, fFilmGrain, HDRParams.w);

#if %_RT_SAMPLE0
	// Enable an exposure clamp which will completely hide grain when the result is 1.0, which is really often (CE-13325)
	// This should be legacy problem now enabled by r_GrainEnableExposureThreshold for pre-5.5 compatibility
	const float fSceneLum = PAAComp_LumTex.Load(int3(0, 0, 0)).x;
	const half fSceneKey = 1.03h - 2.0h / (2.0h + log2(fSceneLum + 1.0));
	const half fExposure = clamp(fSceneKey / fSceneLum, HDREyeAdaptation.y, HDREyeAdaptation.z);

	fFilmGrain = lerp(fFilmGrain, 0.5h, sqrt(fExposure)); 
#endif

	// Overlay blending
	cScene.xyz = step(0.5h, cColor.xyz);
	cScene.xyz = lerp((cColor.xyz * fFilmGrain * 2.h), (1.h - (2.h * (1.h - cColor.xyz) * (1.h - fFilmGrain))), cScene.xyz);
}

pixout PostAAComposites_PS(vtxOut IN)
{
	pixout OUT = (pixout) 0;

	OUT.Color = PAAComp_CurTarg.Load(int3(IN.WPos.xy, 0));
	
#if %_RT_SAMPLE2	
	// Apply sharpening
	half3 cTL = PAAComp_CurTarg.Load(int3(IN.WPos.xy, 0), int2(-1, -1));
	half3 cTR = PAAComp_CurTarg.Load(int3(IN.WPos.xy, 0), int2( 1, -1));
	half3 cBL = PAAComp_CurTarg.Load(int3(IN.WPos.xy, 0), int2(-1,  1));
	half3 cBR = PAAComp_CurTarg.Load(int3(IN.WPos.xy, 0), int2( 1,  1));
	half3 cFiltered = (sqr(cTL) + sqr(cTR) + sqr(cBL) + sqr(cBR)) * 0.25h;
	OUT.Color.rgb = sqrt( saturate(lerp( cFiltered, OUT.Color.rgb * OUT.Color.rgb, vParams.x )) );
#endif

#if %_RT_SAMPLE1
	// Apply lens composite (linear space composition)
	half4 cLensOpticsComposite = PAAComp_LensOpt.Load(int3(IN.WPos.xy, 0));

	#if %_RT_SAMPLE3
		half2 vTexelSize = 2.0h * PS_ScreenSize.zw * vLensOpticsParams.w;
		cLensOpticsComposite.r = GetTexture2D(PAAComp_LensOpt, PAAComp_LLSS, (IN.baseTC.xy - 0.5) * (1 + vTexelSize) + 0.5).r;
	#endif
	
	float3 cLensOptics = cLensOpticsComposite * (1 - OUT.Color.rgb);
	
	#if %_RT_SAMPLE5
		TexColorChart2D(PAAComp_ClrChart, PAAComp_CCSS, cLensOptics.rgb);
	#endif
	
	OUT.Color.rgb += cLensOptics;
#endif

	// Apply grain in screen color-space
	ApplyFilmGrain(OUT.Color, OUT.Color, IN.WPos, IN.baseTC);

	// No out-of-gammut pixels from here on
	OUT.Color = saturate(OUT.Color);

#if %_RT_SAMPLE4
	// Range compression (without out-of-gammut pixels)
	OUT.Color.xyz = LimitREC709_8Bit(OUT.Color.xyz);
#endif

	return OUT;
}

technique PostAAComposites
{
	pass p0
	{
		VertexShader = FullscreenTriVS();
		PixelShader = PostAAComposites_PS() PostAA_PS;
		CullMode = None;        
	}
}

Texture2D<float4> PostAA_Dbg              : register(t0); 
SamplerState PostAA_DbgSampler            : register(s0);

pixout DebugPostAA_PS(vtxOut IN)
{
	pixout OUT = (pixout) 0;
	vDebugParams.xy = clamp(vDebugParams.xy, 0, PS_ScreenSize.xy);

	OUT.Color = PostAA_Dbg.Load(int3(IN.WPos.xy, 0));

	const float2 tcZoomed = ((IN.WPos.xy - vDebugParams.xy) * rcp(vDebugParams.w) + vDebugParams.xy) * PS_ScreenSize.zw * 2.0;	
	const float2 vArea = (IN.WPos.xy-(vDebugParams.xy - PS_ScreenSize.xy * 0.25 ));	
	const float2 vZoomedArea = (vArea > 0 && vArea < PS_ScreenSize.xy * 0.5) ? float2(1,1) : float2(0,0);
	const float2 vBorder = (((vArea.xy >= 0 && vArea.xy < 1) || (vArea.xy >= PS_ScreenSize.xy*0.5-1 && vArea.xy < PS_ScreenSize.xy*0.5)) && vArea.yx > 0 && vArea.yx < PS_ScreenSize.yx*0.5) ? float2(1,1) : float2(0,0);

	OUT.Color = lerp(OUT.Color, GetTexture2D(PostAA_Dbg, PostAA_DbgSampler, tcZoomed), min(vZoomedArea.x, vZoomedArea.y));
	OUT.Color = max(OUT.Color, max(vBorder.x, vBorder.y));
	
	const float2 vPatternSize = PS_ScreenSize.xy * float2(0.05, 0.05 * PS_ScreenSize.x / PS_ScreenSize.y);
	const float2 vPatternArea = (vArea > 0 && vArea < vPatternSize) ? float2(1,1) : float2(0,0);
	if (min(vPatternArea.x, vPatternArea.y))
	{
		// [-1.0, +1.0]
		const float2 SubpixelShift = float2(
			0.5f + 0.5f * (CV_ProjMatr[0][2] - CV_ProjMatrUnjittered[0][2]) * PS_ScreenSize.x,
			0.5f + 0.5f * (CV_ProjMatr[1][2] - CV_ProjMatrUnjittered[1][2]) * PS_ScreenSize.y
		);

		// (-1.0, +1.0)
		const float2 AreaPosition = float2(
			vArea.x / vPatternSize.x,
			vArea.y / vPatternSize.y
		);

		OUT.Color = 1.0 - step(length(AreaPosition.xy - SubpixelShift), 0.05);
	}

	return OUT;
}

technique DebugPostAA
{
	pass p0
	{
		VertexShader = FullscreenTriVS();
		PixelShader = DebugPostAA_PS() PostAA_PS;
		CullMode = None;
	}
}

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

SamplerState subsampledSS : register(s0) = SS_BilinearClamp;
Texture2D subsampledTex : register(t0);

pixout UpscaleImagePS(vtxOut IN)
{
	// vParams.xy: source width, source height
	float2 texCoords = IN.baseTC.xy * vParams.xy + 0.5f;
	float2 intPart = floor(texCoords);
	float2 f = texCoords - intPart;

	// Apply smoothstep function to get a mixture between nearest neighbor and linear filtering
	f = f * f * (3 - 2 * f);

	texCoords = intPart + f;
	texCoords = (texCoords - 0.5) / vParams.xy;

	return (pixout)subsampledTex.Sample(subsampledSS, texCoords);
}

technique UpscaleImage
{
	pass p0
	{
		VertexShader = BaseVS();
		PixelShader = UpscaleImagePS() PostAA_PS;
	}
}
