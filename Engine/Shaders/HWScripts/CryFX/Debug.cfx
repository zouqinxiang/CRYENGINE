// Copyright 2001-2018 Crytek GmbH / Crytek Group. All rights reserved.

#include "Common.cfi"
#include "ShadeLib.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "ShaderDrawType = Custom;"
>;

/// Un-Tweakables //////////////////////

Texture2D    texBaseMap    : register(t0);
Texture2D    texPaletteMap : register(t1);
Texture2D    texBaseMapRG  : register(t0);
Texture2D    texBaseMapBA  : register(t1);

SamplerState smpBaseMap    : register(s0);
SamplerState smpBaseMapBA  : register(s1);
SamplerState smpPaletteMap : register(s1);

struct app2vert
{
  IN_P
  IN_TBASE
	IN_C0
};

struct vert2frag
{
  float4 HPosition  : SV_POSITION;
  float2 baseTC     : TEXCOORD0;
};

vert2frag TransformCompVS(app2vert IN)
{
  vert2frag OUT = (vert2frag)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.HPosition = mul(CV_ViewProjMatr, vPos);
  
  OUT.baseTC.xy = IN.baseTC.xy;

  return OUT;
}

vert2frag TransformVS(app2vert IN)
{
  vert2frag OUT = (vert2frag)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.HPosition = mul(CV_ViewProjMatr, vPos);
  
  OUT.baseTC.xy = IN.baseTC.xy;

  return OUT;
}

pixout Debug_ShowMRTPS(vert2frag IN)
{
  pixout OUT;

  half4 vColor;
  vColor.xy = GetTexture2D(texBaseMapRG, smpBaseMap, IN.baseTC.xy).xy;
  vColor.zw = GetTexture2D(texBaseMapBA, smpBaseMapBA, IN.baseTC.xy).xy;
    
  OUT.Color = vColor;

  return OUT;
}

pixout Debug_ShowRPS(vert2frag IN)
{
  pixout OUT;

  OUT.Color = GetTexture2D(texBaseMap, smpBaseMap, IN.baseTC.xy).x;

  return OUT;
}

pixout ShowInstructionsPS(vert2frag IN)
{
  pixout OUT;

  float4 vVal = GetTexture2D(texBaseMap, smpBaseMap, IN.baseTC.xy);
  float fVal = vVal.x;
  OUT.Color = GetTexture2D(texPaletteMap, smpPaletteMap, float2(0.25, fVal));
  

  return OUT;
}

pixout GradInstructionsPS(vert2frag IN)
{
  pixout OUT;

  OUT.Color = GetTexture2D(texPaletteMap, smpPaletteMap, float2(0.25, IN.baseTC.y));
  
  return OUT;
}



technique Debug_ShowMRT
{
  pass p0
  {
    VertexShader = TransformVS();
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;
    
    PixelShader = Debug_ShowMRTPS();
  }
}

technique Debug_ShowR
{
  pass p0
  {
    VertexShader = TransformVS();
    
    ZEnable = false;
    ZWriteEnable = false;
    CullMode = None;
    
    PixelShader = Debug_ShowRPS();
  }
}

technique ShowInstructions
{
  pass p0
  {
    VertexShader = TransformCompVS();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
   
    PixelShader = ShowInstructionsPS();
  }
}

technique InstructionsGrad
{
  pass p0
  {
    VertexShader = TransformCompVS();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
   
    PixelShader = GradInstructionsPS();
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
/// Debug_RenderTarget technique /////////////////////////////////////////////////////////////////////////

/// Specific data ////////////////////////

/// Constants ////////////////////////////

cbuffer CBDebugRenderTarget : register(b0)
{
	struct
	{
		float4 colorMultiplier;
		float4 showRTFlags; // onlyAlpha, RGBKEncoded, aliased, 0
		float4 transform; 
	} cbDebugRenderTarget;
};


////////////////// samplers /////////////////////

///////////////// vertex shader //////////////////
vert2frag Debug_RenderTargetVS(app2vert IN)
{
  vert2frag OUT = (vert2frag)0; 

  OUT.HPosition.xy = IN.Position.xy * cbDebugRenderTarget.transform.xy + cbDebugRenderTarget.transform.zw;
  OUT.HPosition.zw = float2(0.0, 1.0);
  
  OUT.baseTC.xy = IN.baseTC.xy;

  return OUT;
}
///////////////// pixel shader //////////////////
pixout Debug_RenderTargetPS(vert2frag IN)
{
	pixout OUT = (pixout)0;
	
	const float onlyAlpha   = cbDebugRenderTarget.showRTFlags.x;
	const float RGBKEncoded = cbDebugRenderTarget.showRTFlags.y;
	const float aliased     = cbDebugRenderTarget.showRTFlags.z;

	half4 color = GetTexture2D(texBaseMap, smpBaseMap, IN.baseTC.xy);
	
	if (RGBKEncoded > 0.5f)
	{
		color.rgb = DecodeRGBK(color, SCENE_HDR_MULTIPLIER, false);
	}
	else if (aliased > 0.5f)
	{
		color.rgb = Decode7E3F(color).rgb;
	}
	
	color *= cbDebugRenderTarget.colorMultiplier;	
	OUT.Color = lerp(color, color.wwww, onlyAlpha);

  return OUT;
}

////////////////// technique /////////////////////

technique Debug_RenderTarget
{
	pass p0
	{
		VertexShader = Debug_RenderTargetVS();
		PixelShader  = Debug_RenderTargetPS();
	}
}

/////////////////////// eof ///
